.58
fdisk /dev/vdb 

# 阿里云服务器使用教程

## 云服务器创建实例等教程查看官方帮助文档https://help.aliyun.com/document_detail/51793.html?spm=a2c4g.11186623.2.64.2508bc2b3fL7Yo#concept-wy4-th1-ydb

## 远程连接云服务器
- 1、下载安装 XShell 5  新建会话，输入主机ip 即云服务器中IP地址（公）
- 2、使用 ssh 命令登录到您的服务器 ssh ip地址  ，然后输入密码，保存SSH秘钥即可

## 部署步骤
参考教程https://www.alibabacloud.com/zh/getting-started/projects/how-to-deploy-django-application-on-alibaba-cloud
https://www.aliyun.com/jiaocheng/483225.html
- apt-get install update    #升级软件包（！！很重要）
- 安装 virtualenv   sudo pip install virtualenv

●	创建目录以存储您的 virtualenv
mkdir ~/.virtualenvs
●	安装 virtualenwrapper
sudo pip install virtualenvwrapper
●	将 WORKON_HOME 设置为您的 virtualenv 目录
导出 WORKON_HOME=~/.virtualenvs
●	将 WORKON_HOME 设置为您的 virtualenv 目录
export WORKON_HOME=~/.virtualenvs
●	将 virtualenvwrapper.sh 添加到 .bashrc
将下面两行添加到 ~/.bashrc 的末尾，以便加载 virtualenvwrapper 命令。
export WORKON_HOME=~/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
退出，然后重新打开您的 shell，或者使用 source ~/.bashrc 命令重新加载 .bashrc，然后一切准备就绪

3.	通过创建一个新的 virtualenv 为部署 Django 应用程序设置环境：

mkvirtualenv DjangoApp (注意！)
要退出新的 virtualenv，请使用 deactivate。
您可以使用 workon 在环境之间切换。要加载或在 virtualenv 之间切换，请使用 workon 命令：
workon DjangoApp
4.	在您的当前环境中安装 Django
pip install django
(如果安装出错，大概率是使用这个命令安装大django和Python的版本不一致，根据提示输入python -m pip install "django<2"即可安装成功)


5.	使用 django-admin 命令创建样本项目并将目录更改为项目文件夹。

django-admin startproject todoApp
cd todoApp/

6.	迁移或引导您的数据库。

python manage.py migrate
7.	创建超级用户以访问管理面板。

python manage.py createsuperuser
8.	设置用户后，通过运行由 manage.py 操作的 runserver 命令测试您的应用程序

python manage.py runserver 0.0.0.0:8000
您将看到以下内容在端口 8000 上运行

现在使用 Nginx 将您的应用程序置于 Web 服务器之后。

9.	创建数据库架构 开通 python 环境。
●	将目录更改为 Django 项目目录
●	运行以下命令
python manage.py migrate

10.	收集所有静态文件（css、js 等）
●	运行以下命令以在任意特定位置收集所有静态文件

Python manage.py collectstatic --noinput
●	开发人员负责将 STATIC_URL 路径设置为将收集所有静态文件的位置。
●	这些变量在项目目录内的 setting.py 中定义。
1.	STATIC_URL
2.	STATICFILES_DIRS
3.	STATIC_ROOT

11.	使用 uwsgi 服务器安装 uwsgi 库并启动服务器。

pip install uWSGI
●	创建用于部署 Django 应用程序的 ini 文件
vim uwsgi.ini

●	将其保存到应用程序目录上的 uwsgi.ini。如需进一步了解如何编写 ini 文件，请参阅 Python/WSGI 应用程序快速入门。运行此命令以启动您的应用程序。

uwsgi uwsgi.ini （您的 ini 文件）
12.	更改 nginx 配置文件以用于应用程序。

server   {       listen 80 default_server;        		listen [::]:80 default_server ipv6only=on;        		server_name localhost;  location /static/   {        			include uwsgi_params;        			alias /root/todoApp/public/;  }  location  /    {      			  include uwsgi_params;      			  uwsgi_pass unix:/tmp/uwsgi.sock;    		 } }
13.	重启 nginx，随后您的应用程序将启动并在端口 80 上的 nginx 之后运行。

## 出现等问题
E: Unable to locate package apache2
E: Unable to locate package libapache2-mod-wsgi
使用 apt-get install update 解决

mkvirtualenv command not found解决
https://blog.csdn.net/baidu_32542573/article/details/80548618
Ubuntu操作系统的是 virtualenv Windows操作系统的是mkvirtualenv

解决无法连接到Django项目到服务器问题：
在项目到setting.py中ALLOWED_HOST中加入IP地址，根据出错的提示加入即可。

解决执行python manager.py runserver 0.0.0.0:8000报错  Error: That port is already in use.的问题。
https://www.cnblogs.com/zywscq/p/5020895.html
即端口号已经被占用,说明servr已经在运行了(也有可能在后台运行)

那么找到该进程,kill掉即可.

或者最简单的解决方法就是：

在终端输入 sudo fuser -k 8000/tcp

这样和端口8000相关的进程就都关了

解决执行pip install uWSGI 时安装报错问题
[x86_64-linux-gnu-gcc -In file included from plugins/python/python_plugin.c:1:0:
plugins/python/uwsgi_python.h:2:20: fatal error: Python.h: No such file or directory
 #include 
                   ^
compilation terminated.
It turned out that it couldn't find Python.h. Installing python2.7-dev fixed the problem for me.

apt-get install -y python2.7-dev
